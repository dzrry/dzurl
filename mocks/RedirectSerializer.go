// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/dzrry/dzurl/domain"
	mock "github.com/stretchr/testify/mock"
)

// RedirectSerializer is an autogenerated mock type for the RedirectSerializer type
type RedirectSerializer struct {
	mock.Mock
}

// Decode provides a mock function with given fields: data
func (_m *RedirectSerializer) Decode(data []byte) (*domain.Redirect, error) {
	ret := _m.Called(data)

	var r0 *domain.Redirect
	if rf, ok := ret.Get(0).(func([]byte) *domain.Redirect); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Redirect)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encode provides a mock function with given fields: value
func (_m *RedirectSerializer) Encode(value *domain.Redirect) ([]byte, error) {
	ret := _m.Called(value)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(*domain.Redirect) []byte); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.Redirect) error); ok {
		r1 = rf(value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
